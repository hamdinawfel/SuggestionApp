@page "/AdminApproval"

@attribute [Authorize(Policy = "Admin")]

@inject ISuggestionData SuggestionData
@inject IUserData UserData
@inject NavigationManager navManager

<h1 class="page-heading text-uppercase mb-4">Pending Submissions</h1>
<div class="row mb-2">
    <div class="suggestions-count col-8 mt-2 text-light">@submistions?.Count Submissions</div>
    <div class="col-4 close-button-container">
        <button @onclick="ClosePage" class="btn btn-close" />
    </div>
</div>

@if (submistions is not null)
{
    @foreach (var s in submistions)
    {
        <div class="row submission">
            <div class="col-lg-2 col-md-3 col-sm-4">
                <button @onclick="(() => ApprovedSuggestion(s))" class="btn btn-approve">Approve</button>
                <button @onclick="(() => RejectSuggestion(s))" class="btn btn-reject">Reject</button>
            </div>
            <div class="col-lg-10 col-md-9 col-sm-8">
                <div>
                    @if (currentEditingTitle == s.Id)
                    {
                        <EditForm class="approval-edit-form" Model="@editedTitle" OnSubmit="() => SaveTitle(s)">
                            <InputText class="form-control approval-edit-field" @bind-Value="@editedTitle" />
                            <button class="btn" type="submit">
                                <span class="oi oi-check submission-edit-approve"></span>
                            </button>
                            <button class="btn" type="button" @onclick="(() => currentEditingTitle = string.Empty)">
                                <span class="oi oi-x submission-edit-reject"></span>
                            </button>
                        </EditForm>
                    }
                    else
                    {
                        @s.Suggestion
                        <span class="oi oi-pencil submission-edit-icon" @onclick="(()=>EditTitle(s))"></span>
                    }
                </div>
                <div>
                    @s.Category.CategoryName
                </div>
                <div>
                    @s.Author.DisplayName
                </div>
                <div>
                    @if (currentEditingDescription == s.Id)
                    {
                        <EditForm Model="@editedDescription" OnSubmit="() => SaveDescription(s)" class="approval-edit-form">
                            <InputText @bind-Value="@editedDescription" class="form-control approval-edit-field" />
                            <button type="submit">
                                <span class="oi oi-check submission-edit-approve"></span>
                            </button>
                            <button @onclick="(() => currentEditingDescription = string.Empty)" class="btn">
                                <span class="oi oi-x submission-edit-reject"></span>
                            </button>
                        </EditForm>
                    }
                    else
                    {
                        @s.Description
                        <span class="oi oi-pencil submission-edit-icon" @onclick="(()=>EditDescription(s))"></span>
                    }
                </div>
            </div>
        </div>
    }
}
@code {
    private List<SuggestionModel> submistions;
    private SuggestionModel editingModel;
    private string currentEditingTitle = "";
    private string editedTitle = "";
    private string currentEditingDescription = "";
    private string editedDescription = "";

    protected async override Task OnInitializedAsync()
    {
        submistions = await SuggestionData.GetAllSuggestionWaitingForApproval();
    }

    private async Task ApprovedSuggestion(SuggestionModel suggestion)
    {
        suggestion.ApprovedForRelease = true;
        submistions.Remove(suggestion);
        await SuggestionData.UpdateSuggestion(suggestion);
    }

    private async Task RejectSuggestion(SuggestionModel suggestion)
    {
        suggestion.Rejected = true;
        submistions.Remove(suggestion);
        await SuggestionData.UpdateSuggestion(suggestion);
    }

    private void EditTitle(SuggestionModel model)
    {
        editingModel = model;
        editedTitle = model.Suggestion;
        currentEditingTitle = model.Id;
        currentEditingDescription = "";
    }

    private async Task SaveTitle(SuggestionModel model)
    {
        currentEditingTitle = string.Empty;
        model.Suggestion = editedTitle;
        await SuggestionData.UpdateSuggestion(model);
    }

    private void EditDescription(SuggestionModel model)
    {
        editingModel = model;
        editedDescription = model.Description;
        currentEditingDescription = model.Id;
        currentEditingTitle = "";
    }

    private async Task SaveDescription(SuggestionModel model)
    {
        currentEditingDescription = string.Empty;
        model.Description = editedDescription;
        await SuggestionData.UpdateSuggestion(model);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
