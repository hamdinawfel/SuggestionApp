@page "/AdminApproval"

@inject ISuggestionData SuggestionData
@inject IUserData UserData
@inject NavigationManager navManager

<h1>Pending Suggestion</h1>
<div>
    <div>@submistions?.Count Suggestions</div>
    <div>
        <button @onclick="ClosePage"></button>
    </div>
</div>
@if (submistions is not null)
{
    @foreach (var s in submistions)
    {
        <div>
            <div>
                <button @onclick="(() => ApprovedSuggestion(s))">Approve</button>
                <button @onclick="(() => RejectSuggestion(s))">Reject</button>
            </div>
            <div>
                @if (currentEditingTitle == s.Id)
                {
                    <EditForm Model="@editedTitle" OnSubmit="() => SaveTitle(s)">
                        <InputText @bind-Value="@editedTitle" />
                        <button type="submit">
                            <span class="oi oi-check"></span>
                        </button>
                        <button @onclick="(() => currentEditingTitle = string.Empty)">
                            <span class="oi oi-x"></span>
                        </button>
                    </EditForm>
                }
                else
                {
                    @s.Suggestion
                    <span class="oi oi-pencil" @onclick="(()=>EditTitle(s))"></span>
                }
            </div>
            <div>
                @s.Category.CategoryName
            </div>
            <div>
                @s.Author.DisplayName
            </div>
            <div>
                @if (currentEditingDescription == s.Id)
                {
                    <EditForm Model="@editedDescription" OnSubmit="() => SaveDescription(s)">
                        <InputText @bind-Value="@editedDescription" />
                        <button type="submit">
                            <span class="oi oi-check"></span>
                        </button>
                        <button @onclick="(() => currentEditingDescription = string.Empty)">
                            <span class="oi oi-x"></span>
                        </button>
                    </EditForm>
                }
                else
                {
                    @s.Description
                    <span class="oi oi-pencil" @onclick="(()=>EditDescription(s))"></span>
                }
            </div>
        </div>
    }
}
@code {
    private List<SuggestionModel> submistions;
    private SuggestionModel editingModel;
    private string currentEditingTitle = "";
    private string editedTitle = "";
    private string currentEditingDescription = "";
    private string editedDescription = "";

    protected async override Task OnInitializedAsync()
    {
        submistions = await SuggestionData.GetAllSuggestionWaitingForApproval();
    }

    private async Task ApprovedSuggestion(SuggestionModel suggestion)
    {
        suggestion.ApprovedForRelease = true;
        submistions.Remove(suggestion);
        await SuggestionData.UpdateSuggestion(suggestion);
    }

    private async Task RejectSuggestion(SuggestionModel suggestion)
    {
        suggestion.Rejected = true;
        submistions.Remove(suggestion);
        await SuggestionData.UpdateSuggestion(suggestion);
    }

    private void EditTitle(SuggestionModel model)
    {
        editingModel = model;
        editedTitle = model.Suggestion;
        currentEditingTitle = model.Id;
        currentEditingDescription = "";
    }

    private async Task SaveTitle(SuggestionModel model)
    {
        currentEditingTitle = string.Empty;
        model.Suggestion = editedTitle;
        await SuggestionData.UpdateSuggestion(model);
    }

    private void EditDescription(SuggestionModel model)
    {
        editingModel = model;
        editedDescription = model.Description;
        currentEditingDescription = model.Id;
        currentEditingTitle = "";
    }

    private async Task SaveDescription(SuggestionModel model)
    {
        currentEditingDescription = string.Empty;
        model.Description = editedDescription;
        await SuggestionData.UpdateSuggestion(model);
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
