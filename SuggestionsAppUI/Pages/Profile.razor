@page "/Profile"

@attribute [Authorize]

@inject AuthenticationStateProvider authProvider
@inject ISuggestionData SuggestionData
@inject IUserData UserData
@inject NavigationManager navManager

<h1 class="page-heading text-uppercase mb-4">My Profile</h1>

<div class="row">
    <div class="col-12 close-button-container">
        <button class="btn btn-close" @onclick="ClosePage" />
    </div>
</div>

<div class="form-layout mb-3">
    <h2 class="my-submission-heading">My Account</h2>
    <p class="my-submission-text">
        <a href="MicrosoftIdentity/Account/EditProfile">Edit my profile</a>
    </p>
</div>

@if (approved?.Count > 0)
{

    <div class="form-layout mb-3">
        <h2 class="my-submission-heading">Approved Suggestions</h2>
        <p class="my-submission-text">These are your suggestions that were but did not gain enough traction.</p>
        @foreach (var s in approved)
        {
            <hr class="my-submission-separator" />
            <div class="fw-bold suggestion-detail-short">
                @s.Suggestion
            </div>
            <p class="my-submission-text">
                @s.DateCreated.ToString("MM/dd/yyyy");
            </p>
            <p class="my-submission-text">
                Total Votes: @s.UserVotes.Count
            </p>
            <p class="my-submission-text">
                @s.Category.CategoryName
            </p>
            <p class="my-submission-text">
                @s.Description
            </p>
            @if (s.SuggestionStatus is not null)
            {
                <div class="fw-bold suggestion-detail-short">
                    @s.SuggestionStatus.StatusName
                </div>
                <p class="my-submission-text">
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    </div>
}

@if (archived?.Count > 0)
{

    <div class="form-layout mb-3">
        <h2 class="my-submission-heading">Archived Suggestions</h2>
        <p class="my-submission-text">These are your suggestions that were not deemed to be appropriate for the training suggestion site.</p>
        @foreach (var s in archived)
        {
            <hr class="my-submission-separator" />
            <div class="fw-bold suggestion-detail-short">
                @s.Suggestion
            </div>
            <p class="my-submission-text">
                @s.DateCreated.ToString("MM/dd/yyyy");
            </p>
            <p class="my-submission-text">
                Total Votes: @s.UserVotes.Count
            </p>
            <p class="my-submission-text">
                @s.Category.CategoryName
            </p>
            <p class="my-submission-text">
                @s.Description
            </p>
            @if (s.SuggestionStatus is not null)
            {
                <div class="fw-bold suggestion-detail-short">
                    @s.SuggestionStatus.StatusName
                </div>
                <p class="my-submission-text">
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    </div>
}

@if (pending?.Count > 0)
{

    <div class="form-layout mb-3">
        <h2 class="my-submission-heading">Pending Suggestions</h2>
        <p class="my-submission-text">These are your suggestions that are currently active.</p>
        @foreach (var s in pending)
        {
            <hr class="my-submission-separator" />
            <div class="fw-bold suggestion-detail-short">
                @s.Suggestion
            </div>
            <p class="my-submission-text">
                @s.DateCreated.ToString("MM/dd/yyyy");
            </p>
            <p class="my-submission-text">
                Total Votes: @s.UserVotes.Count
            </p>
            <p class="my-submission-text">
                @s.Category.CategoryName
            </p>
            <p class="my-submission-text">
                @s.Description
            </p>
            @if (s.SuggestionStatus is not null)
            {
                <div class="fw-bold suggestion-detail-short">
                    @s.SuggestionStatus.StatusName
                </div>
                <p class="my-submission-text">
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    </div>
}


@if (rejected?.Count > 0)
{

    <div class="form-layout mb-3">
        <h2 class="my-submission-heading">Rejeted Suggestions</h2>
        <p class="my-submission-text">These are your suggestions that are currently active.</p>
        @foreach (var s in rejected)
        {
            <hr class="my-submission-separator" />
            <div class="fw-bold suggestion-detail-short">
                @s.Suggestion
            </div>
            <p class="my-submission-text">
                @s.DateCreated.ToString("MM/dd/yyyy");
            </p>
            <p class="my-submission-text">
                Total Votes: @s.UserVotes.Count
            </p>
            <p class="my-submission-text">
                @s.Category.CategoryName
            </p>
            <p class="my-submission-text">
                @s.Description
            </p>
            @if (s.SuggestionStatus is not null)
            {
                <div class="fw-bold suggestion-detail-short">
                    @s.SuggestionStatus.StatusName
                </div>
                <p class="my-submission-text">
                    @((MarkupString)s.OwnerNotes)
                </p>
            }
        }
    </div>
}
@code {
    private UserModel loggedInUser;
    private List<SuggestionModel> submistions;
    private List<SuggestionModel> approved;
    private List<SuggestionModel> archived;
    private List<SuggestionModel> pending;
    private List<SuggestionModel> rejected;

    protected async override Task OnInitializedAsync()
    {
        
        loggedInUser = await authProvider.GetUserFromAuth(UserData);
        var results = await SuggestionData.GetUsersSuggestions(loggedInUser.Id);
        if (results != null && loggedInUser != null)
        {
            submistions = results.OrderByDescending(c => c.DateCreated).ToList();
            approved = submistions.Where(s => s.ApprovedForRelease && s.Archived == false && s.Rejected).ToList();
            archived = submistions.Where(s => s.Archived && s.Rejected == false).ToList();
            rejected = submistions.Where(s => s.Rejected && s.Archived == false).ToList();
        }
    }

    protected void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
