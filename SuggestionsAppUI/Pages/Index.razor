@page "/"

@inject AuthenticationStateProvider authProvider
@inject ICategoryData CategoryData
@inject IStatusData StatusData
@inject ISuggestionData SuggestionData
@inject IUserData UserData

@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<h1 class="page-heading text-uppercase mb-4">Training Suggestions</h1>
<div class="suggest-btn-container">
    <button class="suggest-btn btn btn-outline-light btn-lg text-uppercase" @onclick="LoadCreatePage">Suggest</button>
</div>

<div class="row">
    <div class="suggestions-count col-md-4 text-light mt-2">@suggestions?.Count Suggestions</div>
    <div class=" col-md-4 col-xl-5 btn-group">
        <button class="btn sort-btn @SortedByNewClass(true)" @onclick="() => OrderByNew(true)">New</button>
        <button class="btn sort-btn @SortedByNewClass(false)" @onclick="() => OrderByNew(false)">Popular</button>
    </div>
    <div class="col-md-4 col-xl-3 search-box">
        <input class="form-control rounded-control" type="text" placeholder="Search" aria-label="Search box" @oninput="(txt) => OnSearchInput((string)txt.Value)" />
    </div>
</div>
<div class="row">
    <div class="col-md-8 col-xl-9">
        @if (suggestions is not null)
        {
            <Virtualize Items="@suggestions" Context="s" OverscanCount="10">
                <div class="suggestion-entry">
                    <div @onclick="(() => VoteUp(s))" class="@GetVoteClass(s)">
                        <div class="text-uppercase">@GetUpVoteTopText(s)</div>
                        <span class="oi oi-caret-top" style="font-size : 3rem;"></span>
                        <div class="text-uppercase">@GetUpVoteBottomText(s)</div>
                    </div>
                    <div class="suggestion-entry-text">
                        <div class="suggestion-entry-text-title" @onclick="(() => OpenDetails(s))">
                            @s.Suggestion
                        </div>
                        @if (archivingSuggestion is null || archivingSuggestion.Id != s.Id)
                        {
                            <div class="suggestion-entry-bottom">
                                <div class="suggestion-entry-text-category" @onclick="() => OpenDetails(s)">
                                    @s.Category?.CategoryName
                                </div>
                                <AuthorizeView Policy="Admin">
                                    <button @onclick="() => archivingSuggestion = s" class="btn suggestion-entry-text-category btn-archive">
                                        Archive
                                    </button>
                                </AuthorizeView>
                            </div>
                        }
                        else
                        {
                            <div class="suggestion-entry-bottom">
                                <button class="btn btn-archive btn-archive-confirm" @onclick="ArchiveSuggestion">
                                    Confirm
                                </button>
                                <button class="btn btn-archive btn-archive-reject" @onclick="() => archivingSuggestion = null">
                                    Cancel
                                </button>
                            </div>
                        }
                    </div>
                    <div class="suggestion-entry-status @GetSuggestionStatusClass(s)">
                        <div class="suggestion-entry-status-text">
                            @s.SuggestionStatus?.StatusName 
                        </div>
                    </div>
                </div>
            </Virtualize>
        }
    </div>
    <div class="col-md-4 col-xl-3 d-none d-md-block">
        @if (categories is not null)
        {
            <div class="categories">
                <span class="text-uppercase fw-bold">Categories</span>
                <div @onclick="(()=>OnCategoryClick())" class="@GetSelectedCategory()">All</div>
                @foreach (CategoryModel c in categories)
                {
                    <div @onclick="(()=>OnCategoryClick(c.CategoryName))" class="@GetSelectedCategory(c.CategoryName)">@c.CategoryName</div>
                }
            </div>
        }

        @if (statuses is not null)
        {
            <div class="statuses">
                <span class="text-uppercase fw-bold">Status</span>
                <div @onclick="(()=>OnStatusClick())" class="@GetSelectedStatus()">All</div>
                @foreach (StatusModel s in statuses)
                {
                    <div @onclick="(()=>OnStatusClick(s.StatusName))" class="@GetSelectedStatus(s.StatusName)">@s.StatusName</div>
                }
            </div>
        }
    </div>
 </div>


@code
{
    private List<CategoryModel> categories;
    private List<SuggestionModel> suggestions;
    private List<StatusModel> statuses;
    private UserModel loggedInUser;

    private SuggestionModel archivingSuggestion;

    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string searchText = "";
    bool isSortedByNew = true;

    protected async override Task OnInitializedAsync()
    {
        categories = await CategoryData.GetAllCategories();
        statuses = await StatusData.GetAllStatuses();
        await LoadAndVerifyUser();

    }
    protected void LoadCreatePage()
    {
        if (loggedInUser is not null)
        {
            navManager.NavigateTo("/Create");
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    } 
    private async Task LoadAndVerifyUser()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

        if (string.IsNullOrWhiteSpace(objectId) == false)
        {
            loggedInUser = await UserData.GetUserFromAuthentication(objectId) ?? new();
            string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
            string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
            string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
            string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

            bool isDirty = false;
            if (objectId.Equals(loggedInUser.ObjectIdentifier) == false)
            {
                isDirty = true;
                loggedInUser.ObjectIdentifier = objectId;
            }

            if (firstName.Equals(loggedInUser.FirstName) == false)
            {
                isDirty = true;
                loggedInUser.FirstName = firstName;
            }

            if (lastName.Equals(loggedInUser.LastName) == false)
            {
                isDirty = true;
                loggedInUser.FirstName = lastName;
            }

            if (displayName.Equals(loggedInUser.DisplayName) == false)
            {
                isDirty = true;
                loggedInUser.DisplayName = displayName;
            }

            if (email.Equals(loggedInUser.EmailAddress) == false)
            {
                isDirty = true;
                loggedInUser.EmailAddress = email;
            }
            if (isDirty)
            {
                if (string.IsNullOrWhiteSpace(loggedInUser.Id))
                {
                    await UserData.CreateUser(loggedInUser);
                }
                else
                {
                    await UserData.UpdateUser(loggedInUser);
                }
            }
        }

    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterSuggestion();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = boolResults.Success ? boolResults.Value : true;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterSuggestion()
    {
        var output = await SuggestionData.GetAllApprovedSuggestion();

        if (selectedCategory != "All")
        {
            output = output.Where(s => s.Category?.CategoryName == selectedCategory).ToList();
        }

        if (selectedStatus != "All")
        {
            output = output.Where(s => s.SuggestionStatus?.StatusName == selectedStatus).ToList();
        }

        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(s => 
                s.Suggestion.Contains(searchText, StringComparison.CurrentCultureIgnoreCase) || 
                s.Description.Contains(searchText,StringComparison.CurrentCultureIgnoreCase)
             ).ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(s => s.UserVotes.Count).ThenByDescending(s => s.DateCreated).ToList();
        }

        suggestions = output;

        await SaveFilterState();
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterSuggestion();
    }

    private async Task OnSearchInput(string inputText)
    {
        searchText = inputText;
        await FilterSuggestion();
    }
   
    private async Task OnCategoryClick(string category = "All")
    {
        selectedCategory = category;
        await FilterSuggestion();
    }
    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status;
        await FilterSuggestion();
    }

    private  async Task VoteUp(SuggestionModel suggestion)
    {
        if (loggedInUser is not null)
        {
            if (suggestion.Author.Id == loggedInUser.Id)
            {
                // Can't vote your own suggestion
                return;
            }
            if (suggestion.UserVotes.Add(loggedInUser.Id) == false)
            {
                suggestion.UserVotes.Remove(loggedInUser.Id);

            }

            await SuggestionData.UpvoteSuggestion(suggestion.Id, loggedInUser.Id);
            if (isSortedByNew == false)
            {
                suggestions = suggestions.OrderByDescending(s => s.UserVotes.Count)
                    .ThenByDescending(s => s.DateCreated).ToList();
            }
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }
    private string GetUpVoteTopText(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count().ToString("00");
        }
        else
        {
            if (suggestion.Author.Id == loggedInUser?.Id)
            {
                return "Awaiting";
            }
            else
            {
                return "Click To";
            }
        }
    }

    private string GetUpVoteBottomText(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes?.Count > 1)
        {
            return "UpVotes";
        }
        else
        {
            return "UpVote";
        }
    }

    private void OpenDetails(SuggestionModel suggestion)
    {
        navManager.NavigateTo($"/Details/{suggestion.Id}");
    }

    private string SortedByNewClass(bool isNew) => isNew == isSortedByNew ? "sort-btn-selected" : "";

    private string GetVoteClass(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes is null || suggestion.UserVotes.Count == 0)
        {
            return "suggestion-entry-no-votes";
        }

        if (loggedInUser is not null && suggestion.UserVotes.Contains(loggedInUser.Id))
        {
            return "suggestion-entry-voted";
        }

        return "suggestion-entry-not-voted";
    }

    private string GetSuggestionStatusClass(SuggestionModel suggestion)
    {
        if (suggestion is null || suggestion.SuggestionStatus is null)
        {
            return "suggestion-entry-status-none";
        }

        string statusClass = suggestion.SuggestionStatus.StatusName switch
        {
            "completed" => "suggestion-entry-status-completed",
            "watching" => "suggestion-entry-status-watching",
            "upcoming" => "suggestion-entry-status-upcoming",
            "dismissed" => "suggestion-entry-status-dismissed",
            _ => "suggestion-entry-status-none"
            };
        return statusClass;
    }

    private string GetSelectedCategory(string category = "All") => category == selectedCategory ? "selected-category" : "";
    private string GetSelectedStatus(string status = "All") => status == selectedStatus ? "selected-status" : "";

    private async Task ArchiveSuggestion()
    {
        archivingSuggestion.Archived = true;
        await SuggestionData.UpdateSuggestion(archivingSuggestion);
        suggestions.Remove(archivingSuggestion);
        archivingSuggestion = null;
    }
}
