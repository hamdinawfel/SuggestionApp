@page "/Details/{Id}"

@inject AuthenticationStateProvider authProvider
@inject ISuggestionData SuggestionData
@inject IUserData UserData
@inject NavigationManager navManager

<h1 class="page-heading text-uppercase mb-4">Suggestion Details</h1>

<div class="row justify-content-center detail-form">
    <div class="col-xl-8 col-lg-10 form-layout">
        @if (suggestion is not null)
        {
            <div class="row suggestion-detail-row">
                <div class="col-11 suggestion-detail">
                    <div>
                        <div @onclick="VoteUp" class="@GetVoteClass()">
                            <div class="text-uppercase">@GetUpVoteTopText()</div>
                            <span class="oi oi-caret-top detail-upvote"></span>
                            <div class="text-uppercase">@GetUpVoteBottomText()</div>
                        </div>
                        <div class="suggestion-detail-date">
                            @suggestion.DateCreated.ToString("MM/dd/yyyy")
                        </div>
                    </div>
                    <div class="suggestion-detail-text">
                        <div class="fw-bold mb-2 suggestion-detail-suggestion">@suggestion.Suggestion</div>
                        <div class="mb-2 suggestion-detail-author">@suggestion.Author.DisplayName</div>
                        <div class="mb-2 d-none d-md-block">@suggestion.Description</div>
                        <div class="suggestion-entry-text-category d-none d-md-block">@suggestion.Category.CategoryName</div>
                    </div>
                </div>
                <div class="col-1 close-button-container">
                    <button @onclick="ClosePage" class="btn btn-close" />
                </div>
                <div class="row d-block d-md-none">
                    <div class="suggestion-detail-text">
                        <div>@suggestion.Description</div>
                        <div class="suggestion-entry-text-category">
                            @suggestion.Category.CategoryName
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@if (suggestion?.SuggestionStatus is not null)
{
    <div class="row justify-content-center detail-form">
        <div class="col-xl-8 col-lg-10 suggestion-results form-layout">
            <div class="@GetStatusClass()"></div>
            <div class="suggestion-detail-status-section">
                <div class="suggestion-detail-status fw-bold mb-2 suggestion-detail-short">
                    @suggestion.SuggestionStatus.StatusName
                </div>
                <div class="suggestion-detail-owner-notes">
                    @((MarkupString)suggestion.OwnerNotes)
                </div>
            </div>
        </div>
    </div>
}

@*@if (suggestion is not null)
{
    <AuthorizeView Policy="Admin">
        <div class="row justify-content-center detail-form">
            <div class="col-xl-8 col-lg-10 form-layout admin-details">
                <div class="suggestion-detail-status fw-bold mb-2 suggestion-detail-short">
                    Set Status
                </div>
                @if (string.IsNullOrWhiteSpace(settingStatus))
                {
                    <div class="admin-set-statuses">
                        <button @onclick="@(() => settingStatus = "completed")"
                            class="btn suggestion-entry-text-category btn-archive btn-status-completed">
                            completed
                        </button>
                        <button @onclick="@(() => settingStatus = "watching")"
                            class="btn suggestion-entry-text-category btn-archive btn-status-watching">
                            watching
                        </button>
                        <button @onclick="@(() => settingStatus = "upcoming")"
                            class="btn suggestion-entry-text-category btn-archive btn-status-upcoming">
                            upcoming
                        </button>
                        <button @onclick="@(() => settingStatus = "dismissed")"
                            class="btn suggestion-entry-text-category btn-archive btn-status-dismissed">
                            dismissed
                        </button>
                    </div>
                }
                else if (settingStatus == "completed")
                {
                    <div>
                        <input type="text" @bind="urlText"
                            class="form-control rounded-control"
                            placeholder="URL"
                            aria-label="Resource URL" />
                    </div>
                    <div class="suggestion-entry-bottom">
                        <button class="btn btn-archive btn-archive-confirm" @onclick="CompleteSetStatus">
                            Confirm
                        </button>
                        <button class="btn btn-archive btn-archive-reject" @onclick="() => settingStatus = null">
                            Cancel
                        </button>
                    </div>
                }
                else
                {
                    <div class="suggestion-entry-bottom">
                        <button class="btn btn-archive btn-archive-confirm" @onclick="CompleteSetStatus">
                            Confirm
                        </button>
                        <button class="btn btn-archive btn-archive-reject" @onclick="() => settingStatus = null">
                            Cancel
                        </button>
                    </div>
                }
            </div>
        </div>
    </AuthorizeView>
}*@
@code {
    private SuggestionModel suggestion;

    [Parameter]
    public string Id { get; set; }
    private UserModel loggedInUser;


    protected async override Task OnInitializedAsync()
    {
        suggestion = await SuggestionData.GetSuggestion(Id);
        loggedInUser = await authProvider.GetUserFromAuth(UserData);
    }



    protected string GetUpVoteTopText()
    {
        if (suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count().ToString("00");
        }
        else
        {
            if (suggestion.Author.Id == loggedInUser?.Id)
            {
                return "Awaiting";
            }
            else
            {
                return "Click To";
            }
        }
    }

    protected string GetUpVoteBottomText()
    {
        if (suggestion.UserVotes?.Count > 1)
        {
            return "UpVotes";
        }
        else
        {
            return "UpVote";
        }
    }

    private async Task VoteUp()
    {
        if (loggedInUser is not null)
        {
            if (suggestion.Author.Id == loggedInUser.Id)
            {
                // Can't vote your own suggestion
                return;
            }
            if (suggestion.UserVotes.Add(loggedInUser.Id) == false)
            {
                suggestion.UserVotes.Remove(loggedInUser.Id);

            }

            await SuggestionData.UpvoteSuggestion(suggestion.Id, loggedInUser.Id);

        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }

    private string GetVoteClass()
    {
        if (suggestion.UserVotes is null || suggestion.UserVotes.Count == 0)
        {
            return "suggestion-detail-no-votes";
        }

        if (loggedInUser is not null && suggestion.UserVotes.Contains(loggedInUser.Id))
        {
            return "suggestion-detail-voted";
        }

        return "suggestion-detail-not-voted";
    }

    private string GetStatusClass()
    {
        if (suggestion is null || suggestion.SuggestionStatus is null)
        {
            return "suggestion-detail-status-none";
        }

        string statusClass = suggestion.SuggestionStatus.StatusName switch
        {
            "Completed" => "suggestion-detail-status-completed",
            "Watching" => "suggestion-detail-status-watching",
            "Upcoming" => "suggestion-detail-status-upcoming",
            "Dismissed" => "suggestion-detail-status-dismissed",
            _ => "suggestion-detail-status-none"
        };
        return statusClass;
    }

    protected void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
