@page "/Details/{Id}"

@inject AuthenticationStateProvider authProvider
@inject ISuggestionData SuggestionData
@inject IUserData UserData
@inject NavigationManager navManager

<h3>Suggestion Details</h3>

<div>
    <div>
        @if (suggestion is not null)
        {
            <div>
                <div>
                    <div @onclick="VoteUp">
                        <div>@GetUpVoteTopText()</div>
                        <span class="oi oi-caret-top"></span>
                        <div>@GetUpVoteBottomText()</div>
                    </div>
                    <div>
                        @suggestion.DateCreated.ToString("MM/dd/yyyy")
                    </div>
                </div>
                <div>
                    <div>@suggestion.Suggestion</div>
                    <div>@suggestion.Author.DisplayName</div>
                    <div>@suggestion.Description</div>
                    <div>@suggestion.Category.CategoryName</div>
                </div>
                <div>
                    <button @onclick="ClosePage">Home Page</button>
                </div>
            </div>
        }
    </div>
</div>

@if (suggestion?.SuggestionStatus is not null)
{
    <div>
        <div>
            <div></div>
            <div>
                <div>
                    @suggestion.SuggestionStatus.StatusName
                </div>
                <div>
                    @((MarkupString)suggestion.OwnerNotes)
                </div>
            </div>
        </div>
    </div>
}

@code {
    private SuggestionModel suggestion;

    [Parameter]
    public string Id { get; set; }
    private UserModel loggedInUser;


    protected async override Task OnInitializedAsync()
    {
        suggestion = await SuggestionData.GetSuggestion(Id);
        loggedInUser = await authProvider.GetUserFromAuth(UserData);
    }

   

    protected string GetUpVoteTopText()
    {
        if (suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count().ToString("00");
        }
        else
        {
            if (suggestion.Author.Id == loggedInUser?.Id)
            {
                return "Awaiting";
            }
            else
            {
                return "Click To";
            }
        }
    }

    protected string GetUpVoteBottomText()
    {
        if (suggestion.UserVotes?.Count > 1)
        {
            return "UpVotes";
        }
        else
        {
            return "UpVote";
        }
    }

    private  async Task VoteUp()
    {
        if (loggedInUser is not null)
        {
            if (suggestion.Author.Id == loggedInUser.Id)
            {
             // Can't vote your own suggestion
                return;
            }
            if (suggestion.UserVotes.Add(loggedInUser.Id) == false)
            {
                suggestion.UserVotes.Remove(loggedInUser.Id);

            }

            await SuggestionData.UpvoteSuggestion(suggestion.Id, loggedInUser.Id);
          
        }
        else
        {
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }

    protected void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
