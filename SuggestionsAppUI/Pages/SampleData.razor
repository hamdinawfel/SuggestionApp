@page "/SampleData"
@inject ICategoryData CategoryData
@inject IStatusData StatusData
@inject IUserData UserData
@inject ISuggestionData SuggestionData

<h3>SampleData</h3>
@if (categoriesCreated)
{
    <h2>Categories has been created</h2>
}
else
{
    <button class="btn btn-primary m-2" @onclick="CreateCategories">Create Categories</button>
}

@if (statusesCreated)
{
    <h2>Statuses has been created</h2>
}
else
{
    <button class="btn btn-primary m-2" @onclick="CreateStatuses">Create Statuses</button>
}

@if (generatedDataCreated)
{
    <h2>Data Sample has been generated...</h2>
}
else
{
    <button class="btn btn-primary m-2" @onclick="GenerateSampleData">Generate Data</button>
}

@code {
    private bool categoriesCreated = false;
    private bool statusesCreated = false;
    private bool generatedDataCreated = false;

    private async Task GenerateSampleData()
    {
        UserModel user = new()
        {
            FirstName = "Nawfel",
            LastName = "Hamdi",
            DisplayName = "hamdi",
            EmailAddress = "hamdi@gmail.com",
            ObjectIdentifier = "avc-123",
        };
        await UserData.CreateUser(user);

        var foundUser = await UserData.GetUserFromAuthentication("avc-123");
        var categories = await CategoryData.GetAllCategories();
        var statuses = await StatusData.GetAllStatuses();
        HashSet<string> votes = new();

        votes.Add("1");
        votes.Add("2");
        votes.Add("3");

        SuggestionModel  suggestion = new()
        {
            Author = new BasicUserModel(foundUser),
            Category = categories[2],
            UserVotes = votes,
            Description = "This is a description of the first suggestion generated by the Generated data method",
            Suggestion = "My first suggestion"
        };
          await SuggestionData.CreateSuggestion(suggestion);
        //    suggestion = new()
        //{
        //    Author = new BasicUserModel(foundUser),
        //    Category = categories[0],
        //    Description = "This is a description of the first suggestion generated by the Generated data method",
        //    Suggestion = "My first suggestion"
        //};
        //await SuggestionData.CreateSuggestion(suggestion);

        //suggestion = new()
        //    {
        //        Author = new BasicUserModel(foundUser),
        //        Category = categories[1],
        //        Description = "This is a description of the first suggestion generated by the Generated data method",
        //        OwnerNotes = "Read my notes here",
        //        Suggestion = "My first suggestion"
        //    };
        //await SuggestionData.CreateSuggestion(suggestion);

        //suggestion = new()
        //    {
        //        Author = new BasicUserModel(foundUser),
        //        Category = categories[2],
        //        UserVotes = votes,
        //        Description = "This is a description of the first suggestion generated by the Generated data method",
        //        Suggestion = "My first suggestion"
        //    };
        //await SuggestionData.CreateSuggestion(suggestion);

        generatedDataCreated = true;
    }

    private async Task CreateCategories()
    {
        var categories = await CategoryData.GetAllCategories();
        if (categories?.Count > 0)
        {
            return;
        }

        CategoryModel cat = new()
        {
            CategoryName = "Courses",
            CategoryDescription = "Full paid courses"
        };
        await CategoryData.CreateCategory(cat);

        cat = new()
            {
                CategoryName = "Dev Questions",
                CategoryDescription = "Dev Questions"
            };
        await CategoryData.CreateCategory(cat);

        cat = new()
        {
            CategoryName = "Question of the day",
            CategoryDescription = "Daily Questions"
        };
        await CategoryData.CreateCategory(cat);
        categoriesCreated = true;
    }

    private async Task CreateStatuses()
    {
        var statuses = await StatusData.GetAllStatuses();
        if (statuses?.Count > 0)
        {
            return;
        }

        StatusModel status = new()
        {
            StatusName = "Status Name 1",
            StatusDescription = "Status 1 Description"
        };
        await StatusData.CreateStatus(status);

        status = new()
            {
                StatusName = "Status Name 2",
                StatusDescription = "Status 2 Description"
            };
        await StatusData.CreateStatus(status);

        status = new()
        {
            StatusName = "Status Name 3",
            StatusDescription = "Status 3 Description"
        };
        await StatusData.CreateStatus(status);

        statusesCreated = true;

    }
}
